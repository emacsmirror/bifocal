#+TITLE: bifocal-mode
#+OPTIONS: toc:3 author:t creator:nil num:nil
#+AUTHOR: Chris Rayner
#+EMAIL: dchrisrayner@gmail.com

[[file:img/screenshot.png]]

* Table of Contents :TOC_3_gh:noexport:
- [[#description][Description]]
- [[#install][Install]]
- [[#run][Run]]
- [[#key-bindings][Key bindings]]

* Description
  In ~bifocal-mode~, paging up causes a comint-mode buffer to be split in two
  windows with a larger window on top (the head) and a smaller input window
  preserved on the bottom (the tail):
  #+begin_src
  +--------------+
  | -------      |
  | -------      |
  | -------      |
  |    [head]    |
  |(show history)|
  +--------------+
  |    [tail]    |
  |(show context)|
  +--------------+
  #+end_src
  This helps with monitoring new output and entering text at the prompt (in the
  tail window), while reviewing previous output (in the head window).  Paging
  down all the way causes the split to disappear.

   Note if you're not on the last line of a buffer, no split will appear.

  ~bifocal-mode~ used to be called ~shx-split~ when it was part of the [[https://github.com/riscy/shx-for-emacs][shx]]
  extensions.

  Use ~M-x customize-group RET bifocal RET~ to see customization options.

  /This version is tested with Emacs 25.2.1/
* Install
  Add the following to your ~.emacs~:

  #+begin_src elisp
  (add-to-list 'load-path "~/path/to/bifocal/")
  (require 'bifocal)
  #+end_src
* Run
  To enable ~bifocal-mode~ in every ~comint-mode~ buffer, use:

  #+begin_src elisp
  (bifocal-global-mode 1)
  #+end_src

  You can also use ~M-x bifocal-mode~ on a case-by-case basis, or just
  add hooks into the mode in question, for example:

  #+begin_src elisp
  (add-hook 'inferior-python-mode-hook #'bifocal-mode)
  #+end_src
* Key bindings
  | Key binding          | Description                                             |
  |----------------------+---------------------------------------------------------|
  | ~<prior>~ (page-up)  | Scroll up; create a split if none exists.               |
  | ~<next>~ (page-down) | Scroll down; remove the split if the bottom is reached. |
  | ~<home>~, ~M-<~      | Scroll all the way up; create a split if none exists.   |
  | ~<end>~, ~M->~       | Scroll all the way down; remove the split.              |

  For compatibility with evil-mode keybindings, you might add
  something like the following to your config:

  #+begin_src elisp
  (add-hook 'comint-mode-hook
            (define-key evil-insert-state-local-map (kbd "C-u") #'bifocal-up)
            (define-key evil-normal-state-local-map (kbd "C-u") #'bifocal-up)
            (define-key evil-insert-state-local-map (kbd "C-d") #'bifocal-down)
            (define-key evil-normal-state-local-map (kbd "C-d") #'bifocal-down))
  #+end_src
